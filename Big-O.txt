Step One: Simplifying Expressions»
Simplify the following big O expressions as much as possible:

O(n + 10) O(n)
O(100 × n) O(n)
O(25) O(1)
O(n2 + n3) O(n^3)
O(n + n + n + n) O(n)
O(1000 × log(n) + n) O(log(n))
O(1000 × n × log(n) + n) O(n*log(n))
O(2n + n2) O(2^n)
O(5 + 3 + 1) O(1)

Step Two: Calculating Time Complexity

function logUpTo(n) {
  for (let i = 1; i <= n; i++) {
    console.log(i);
  }
}

O(n)

function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) {
    console.log(i);
  }
}

If n <=10 O(1)
If n >10 O(1)

function logAtMost10(n) {
  for (let i = 1; i <= Math.min(n, 10); i++) {
    console.log(i);
  }
}

O(1)

function onlyNumsAtEvenIndexes(nums) {
  let numsAtEvens = [];

  for (let i = 0; i < nums.length; i++) {
    if (i % 2 === 0) {
      numsAtEvens.push(nums[i]);
    }
  }

  return numsAtEvens;
}

O(n)

function runningSubtotals(nums) {
  let subtotals = [];

  for (let i = 0; i < nums.length; i++) {
    let subtotal = 0;
    for (let j = 0; j <= i; j++) {
      subtotal += nums[j];
    }
    subtotals.push(subtotal);
  }

  return subtotals;
}

O(n)

const VOWELS = "aeiouAEIOU";

function vowelsCounts(word) {
  let vowelsToCounts = {};

  for (let char of word) {
    if (VOWELS.includes(char)) {
      if (char in vowelsToCounts) {
        vowelsToCounts[char] += 1;
      } else {
        vowelsToCounts[char] = 1;
      }
    }
  }

  return vowelsToCounts;
}
O(n)? O(n^2)?













